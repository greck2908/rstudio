18a19
> import com.google.gwt.aria.client.MenuitemRole;
304a306
>   private MenuItem expandedMenuItem;
395c397
<     return addItem(new MenuItem(html, cmd));
---
>     return addItem(new MenuItem(html, Roles.getMenuitemRole(), false, cmd));
408c410
<     return addItem(new MenuItem(text, asHTML, cmd));
---
>     return addItem(new MenuItem(text, asHTML, Roles.getMenuitemRole(), false, cmd));
445c447,490
<     return addItem(new MenuItem(text, cmd));
---
>     return addItem(new MenuItem(text, Roles.getMenuitemRole(), false, cmd));
>   }
> 
>   /**
>    * Adds a menu item to the bar, that will fire the given command when it is
>    * selected.
>    *
>    * @param text the item's text
>    * @param role the item's a11y role
>    * @param checked <code>true</code> if item is checked
>    * @param cmd the command to be fired
>    * @return the {@link MenuItem} object created
>    */
>   public MenuItem addItem(String text, MenuitemRole role, boolean checked, ScheduledCommand cmd) {
>     return addItem(new MenuItem(text, role, checked, cmd));
>   }
> 
>   /**
>    * Adds a menu item to the bar, that will fire the given command when it is
>    * selected.
>    *
>    * @param text the item's text
>    * @param asHTML <code>true</code> to treat the specified text as html
>    * @param role the item's a11y role
>    * @param checked <code>true</code> if item is checked
>    * @param cmd the command to be fired
>    * @return the {@link MenuItem} object created
>    */
>   public MenuItem addItem(@IsSafeHtml String text, boolean asHTML, MenuitemRole role, boolean checked, ScheduledCommand cmd) {
>     return addItem(new MenuItem(text, asHTML, role, checked, cmd));
>   }
> 
>  /**
>    * Adds a menu item to the bar containing SafeHtml, that will fire the given
>    * command when it is selected.
>    *
>    * @param html the item's html text
>    * @param role the item's a11y role
>    * @param checked <code>true</code> if item is checked
>    * @param cmd the command to be fired
>    * @return the {@link MenuItem} object created
>    */
>   public MenuItem addItem(SafeHtml html, MenuitemRole role, boolean checked, ScheduledCommand cmd) {
>     return addItem(new MenuItem(html, role, checked, cmd));
515a561,565
>       if (expandedMenuItem != null)
>       {
>         expandedMenuItem.setAriaExpanded(false);
>         expandedMenuItem = null;
>       }
788c838
<     onHide(!autoClosed && focusOnHover);
---
>     onHide(!autoClosed);
861a912,918
> 
>         if (shownChildMenu != null
>             && shownChildMenu == selectedItem.getSubMenu())
>         {
>           hideChildMenu(false);
>           shownChildMenu = null;
>         }
980c1037
<   void doItemAction(final MenuItem item, boolean fireCommand, boolean focus) {
---
>   protected void doItemAction(final MenuItem item, boolean fireCommand, boolean focus) {
1009,1010c1066
<         shownChildMenu.onHide(focus);
<         popup.hide();
---
>         hideChildMenu(focus);
1020,1021c1076
<         shownChildMenu.onHide(focus);
<         popup.hide();
---
>         hideChildMenu(focus);
1025,1026c1080
<         shownChildMenu.onHide(focus);
<         popup.hide();
---
>         hideChildMenu(focus);
1032,1033c1086
<       shownChildMenu.onHide(focus);
<       popup.hide();
---
>       hideChildMenu(focus);
1092c1145
<   void updateSubmenuIcon(MenuItem item) {
---
>   protected void updateSubmenuIcon(MenuItem item) {
1108c1161
<     if (submenu == null) {
---
>     if (submenu == null || !item.isVisible()) {
1119c1172,1177
<       td.setInnerSafeHtml(subMenuIcon.getSafeHtml());
---
>       String indicatorHtml = subMenuIcon.getSafeHtml().asString();
>       // add null alt attribute for a11y
>       if (indicatorHtml.startsWith("<img") && indicatorHtml.endsWith(">"))
>         indicatorHtml = indicatorHtml.substring(0, indicatorHtml.length() - 1) + " alt>";
>       td.setInnerHTML(indicatorHtml);
> 
1197a1256
>     Roles.getPresentationRole().set(table);
1273,1274c1332
<       shownChildMenu.onHide(focus);
<       popup.hide();
---
>       hideChildMenu(focus);
1289a1348,1349
>     expandedMenuItem = item;
>     item.setAriaExpanded(true);
1334c1394
<         if (nextItem.isEnabled()) {
---
>         if (nextItem.isEnabled() && nextItem.isVisible()) {
1336c1396,1402
<           break;
---
>           return true;
>         }
>       }
>       for (MenuItem nextItem : items) {
>         if (nextItem.isVisible()) {
>           selectItem(nextItem);
>           return true;
1369c1435
<         if (itemToBeSelected.isEnabled()) {
---
>         if (itemToBeSelected.isEnabled() && itemToBeSelected.isVisible()) {
1406c1472
<         if (itemToBeSelected.isEnabled()) {
---
>         if (itemToBeSelected.isEnabled() && itemToBeSelected.isVisible()) {
1426a1493,1507
> 
>   /**
>    * Hide currently displayed child menu and mark the associate menu item as closed.
>    * @param focus
>    */
>   private void hideChildMenu(boolean focus)
>   {
>     if (expandedMenuItem != null)
>     {
>       expandedMenuItem.setAriaExpanded(false);
>       expandedMenuItem = null;
>     }
>     shownChildMenu.onHide(focus);
>     popup.hide();
>   }
