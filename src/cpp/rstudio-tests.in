#!/usr/bin/env bash

checkUnitTestFailure() {
   RET_CODE=$?
   if [ $RET_CODE != 0 ]; then
      UNIT_TEST_FAILURE=true
   fi
}

checkRUnitTestFailure() {
    FAILURES=$(cat "${CMAKE_CURRENT_BINARY_DIR}/testthat-failures.log")
    if [[ $FAILURES != 0 ]]; then
        UNIT_TEST_FAILURE=true
    fi
}

findLibSegFault()
{
   # if the libsegfault location has not explicitly been set
   # try to find it in common distribution locations
   if [[ -z "$${EMPTY}{RSESSION_DIAGNOSTICS_LIBSEGFAULT}" ]]; then
      if [[ -e /lib/x86_64-linux-gnu/libSegFault.so ]]; then
         RSESSION_DIAGNOSTICS_LIBSEGFAULT=/lib/x86_64-linux-gnu/libSegFault.so
      elif [[ -e /lib/i386-linux-gnu/libSegFault.so ]]; then
         RSESSION_DIAGNOSTICS_LIBSEGFAULT=/lib/i386-linux-gnu/libSegFault.so
      elif [[ -e /lib64/libSegFault.so ]]; then
         RSESSION_DIAGNOSTICS_LIBSEGFAULT=/lib64/libSegFault.so
      elif [[ -e /lib/libSegFault.so ]]; then
         RSESSION_DIAGNOSTICS_LIBSEGFAULT=/lib/libSegFault.so
      fi
   fi
}

runWatchdogProcess()
{
   if [[ "$OSTYPE" == "darwin"* ]]; then
      # requires brew install coreutils
      TIMEOUT_CMD=gtimeout
   else
      TIMEOUT_CMD=timeout
   fi
   timeout=$1
   privileged=$2
   command=$3
   arg1=$4
   arg2=$5
   arg3=$6
   arg4=$7
   arg5=$8

   # centos6 doesn't support the --foreground option for timeout
   if [ "$OPERATING_SYSTEM" = "centos_6" ]; then
      if [ "$privileged" = true ]; then
         sudo /bin/bash -c "env SEGFAULT_SIGNALS='abrt segv' LD_PRELOAD=$RSESSION_DIAGNOSTICS_LIBSEGFAULT $VALGRIND $command $arg1 $arg2 $arg3 $arg4 $arg5;exit"
      else
         /bin/bash -c "env SEGFAULT_SIGNALS='abrt segv' LD_PRELOAD=$RSESSION_DIAGNOSTICS_LIBSEGFAULT $VALGRIND $command $arg1 $arg2 $arg3 $arg4 $arg5;exit"
      fi
   else
      if [ "$privileged" = true ]; then
         sudo $TIMEOUT_CMD --foreground $timeout /bin/bash -c "env SEGFAULT_SIGNALS='abrt segv' LD_PRELOAD=$RSESSION_DIAGNOSTICS_LIBSEGFAULT $VALGRIND $command $arg1 $arg2 $arg3 $arg4 $arg5;exit"
      else
         $TIMEOUT_CMD --foreground $timeout /bin/bash -c "env SEGFAULT_SIGNALS='abrt segv' LD_PRELOAD=$RSESSION_DIAGNOSTICS_LIBSEGFAULT $VALGRIND $command $arg1 $arg2 $arg3 $arg4 $arg5;exit"
      fi
   fi

   RETCODE=$?
   if [ $RETCODE == 124 ]; then
      # process is hanging - use gdb to collect a stack trace to find out why
      echo "Hang detected. Dumping backtrace..."
      if [[ "$OSTYPE" == "darwin"* ]]; then
         # pidof on Mac doesn't support fully qualified process names
         commandbase="$(basename $command)"
      else
         commandbase=$command
      fi
      sudo gdb -q -batch -ex 'thread apply all backtrace' -p "$(pidof $commandbase)"
      sudo kill -9 "$(pidof $commandbase)"
      UNIT_TEST_FAILURE=true
   elif [ $RETCODE != 0 ]; then
      UNIT_TEST_FAILURE=true
   else
      UNIT_TEST_FAILURE=false
   fi
}

findLibSegFault

TEST_SCOPE=
if [ "$1" == "--scope" ]; then
   if [ "$#" == 1 ]; then
      printf "Specify scope (core, rsession, or r).\n"
      exit 1
   fi

   # Remember test scope
   TEST_SCOPE="$2"

   # Remove the option and argument we just read
   shift 2
elif [ "$1" == "--filter" ]; then

   # used for filtering to a subset of R testthat tests
   TEST_SCOPE="r"
   TEST_FILTER="$2"
   shift 2

elif [ "$1" == "--help" ]; then
   printf "%s\n\n" "Runs RStudio unit tests. Available flags: "
   printf "%s\n" "--help    Show this help"
   printf "%s\n" "--scope   Run only tests with the given scope (core, rsession, or r)"
   printf "%s\n\n" "--filter  Used instead of --scope to run a subset of R tests"
   printf "%s\n" "Any other options are passed to Valgrind."
   exit 0
fi

## Any remaining arguments passed in are considered arguments to valgrind
if [ "$#" -eq 0 ]; then
   VALGRIND=
else
   VALGRIND="valgrind --dsymutil=yes $@"
fi

## On a Debug Mac IDE build via xcodebuild, the executables
## will be in a Debug folder
if [ ! -e "${CMAKE_CURRENT_BINARY_DIR}/core/rstudio-core-tests" ]
then
    RSTUDIO_CORETEST_BIN="Debug/rstudio-core-tests"
    RSTUDIO_SESSION_BIN="Debug/rsession"
else
    RSTUDIO_CORETEST_BIN="rstudio-core-tests"
    RSTUDIO_SESSION_BIN="rsession"
fi

# set R environment variables needed by rsession tests
export R_HOME=$(R --slave --vanilla -e "cat(paste(R.home('home'),sep=':'))")
export R_DOC_DIR=$(R --slave --vanilla -e "cat(paste(R.home('doc'),sep=':'))")
export R_LIB_DIR=$(R --slave --vanilla -e "cat(paste(R.home('lib'),sep=':'))")

# On macOS, we need to tell the rsession executable where to look for libR.dylib
if [ "$(uname)" = "Darwin" ]; then
   export DYLD_INSERT_LIBRARIES="$R_LIB_DIR/libR.dylib"
fi

# Run core tests
if [ -z "$TEST_SCOPE" ] || [ "$TEST_SCOPE" == "core" ]; then
    echo Running 'core' tests...
    $VALGRIND ${CMAKE_CURRENT_BINARY_DIR}/core/$RSTUDIO_CORETEST_BIN
    checkUnitTestFailure

    if [ -e ${CMAKE_CURRENT_BINARY_DIR}/server_core/rstudio-server-core-tests ]
    then
        echo Running 'server_core' tests...
        runWatchdogProcess 5m false "${CMAKE_CURRENT_BINARY_DIR}/server_core/rstudio-server-core-tests"
    fi
fi

# Setup for rsession tests
if [ -e ${CMAKE_CURRENT_BINARY_DIR}/conf/rsession-dev.conf ]; then
   SESSION_CONF_FILE=${CMAKE_CURRENT_BINARY_DIR}/conf/rsession-dev.conf
else
   SESSION_CONF_FILE=${CMAKE_CURRENT_BINARY_DIR}/conf/rdesktop-dev.conf
fi

if [ -z "$TEST_SCOPE" ] || [ "$TEST_SCOPE" == "rsession" ]; then
    echo Running 'rsession' tests...

    export RS_CRASH_HANDLER_PATH="${CMAKE_CURRENT_BINARY_DIR}/server/crash-handler-proxy/crash-handler-proxy"
    export RS_CRASHPAD_HANDLER_PATH="/opt/rstudio-tools/crashpad/crashpad/out/Default/crashpad_handler"
    runWatchdogProcess 5m false "${CMAKE_CURRENT_BINARY_DIR}/session/$RSTUDIO_SESSION_BIN" --run-tests --config-file="$SESSION_CONF_FILE"
fi

if [ -z "$TEST_SCOPE" ] || [ "$TEST_SCOPE" == "r" ]; then
    echo Running 'r' tests...

    if [ ! -z "$TEST_FILTER" ]; then
        TESTTHAT_FILTER=", filter = '$TEST_FILTER'"
    fi

    export RS_CRASH_HANDLER_PATH="${CMAKE_CURRENT_BINARY_DIR}/server/crash-handler-proxy/crash-handler-proxy"
    export RS_CRASHPAD_HANDLER_PATH="/opt/rstudio-tools/crashpad/crashpad/out/Default/crashpad_handler"
    runWatchdogProcess 5m false "${CMAKE_CURRENT_BINARY_DIR}/session/$RSTUDIO_SESSION_BIN" \
        --run-script "\"source('${CMAKE_CURRENT_SOURCE_DIR}/tests/testthat/run-tests.R'); runAllTests('${CMAKE_CURRENT_SOURCE_DIR}', '${CMAKE_CURRENT_BINARY_DIR}'$TESTTHAT_FILTER)\"" \
        --config-file="$SESSION_CONF_FILE"
fi

# return an error exit code if any unit tests failed
if [ "$UNIT_TEST_FAILURE" = true ]; then
    exit 1
fi

# otherwise, return success
exit 0
